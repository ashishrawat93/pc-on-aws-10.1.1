{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS Cloud Formation Template for deployment of Informatica Powercenter Version 10.1.0 on a VPC infrastructure. Informatica PowerCenter is deployed on RHEL 7.0. Amazon RDS instance in a private subnet is used as the repository for Informatica Domain Metadata. **WARNING** This template creates Amazon EC2 instance and related resources. You will be billed for the AWS resources used if you create a stack from this template.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "AvailabilityZones",
                        "VPCCIDR",
                        "PrivateSubnet1CIDR",
                        "PrivateSubnet2CIDR",
                        "PublicSubnet1CIDR",
                        "PublicSubnet2CIDR",
                        "RemoteAccessCIDR"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon EC2 Configuration"
                    },
                    "Parameters": [
                        "KeyPairName",
                        "PowerCenterInstanceType",
                        "NumberOfPowerCenterInstances",
                        "EnableEIP"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon RDS Configuration"
                    },
                    "Parameters": [
                        "DatabaseType",
                        "RDSDatabaseName",
                        "DatabaseUsername",
                        "DatabasePassword",
                        "DatabasePasswordConfirm"
                    ]
                },
                {
                    "Label": {
                        "default": "Informatica PowerCenter Configuration"
                    },
                    "Parameters": [
                        "InformaticaDomainName",
                        "InformaticaNodeName",
                        "InformaticaDomainUsername",
                        "InformaticaDomainPassword",
                        "InformaticaDomainPasswordConfirm",
                        "EncryptionKeyPhrase",
                        "LicenseKey"
                    ]
                }
            ],
            "ParameterLabels": {
                "AvailabilityZones": {
                    "default": "Availability Zones"
                },
                "DatabasePassword": {
                    "default": "Database Password"
                },
                "DatabasePasswordConfirm": {
                    "default": "Confirm Password"
                },
                "RDSDatabaseName": {
                    "default": "Database Name"
                },
                "DatabaseType": {
                    "default": "Database Type"
                },
                "DatabaseUsername": {
                    "default": "Database Username"
                },
                "EncryptionKeyPhrase": {
                    "default": "Encryption Key Phrase"
                },
                "InformaticaDomainName": {
                    "default": "Informatica Domain Name"
                },
                "InformaticaNodeName": {
                    "default": "Informatica Node Prefix"
                },
                "InformaticaDomainUsername": {
                    "default": "Informatica Administrator Username"
                },
                "InformaticaDomainPassword": {
                    "default": "Informatica Administrator Password"
                },
                "InformaticaDomainPasswordConfirm": {
                    "default": "Confirm Password"
                },
                "KeyPairName": {
                    "default": "Key Pair Name"
                },
                "PowerCenterInstanceType": {
                    "default": "Informatica Domain Instance Type"
                },
                "NumberOfPowerCenterInstances": {
                    "default": "Number of Instances"
                },
                "EnableEIP": {
                    "default": "Enable Elastic IP Addressing"
                },
                "PrivateSubnet1CIDR": {
                    "default": "Private Subnet 1 CIDR"
                },
                "PrivateSubnet2CIDR": {
                    "default": "Private Subnet 2 CIDR"
                },
                "PublicSubnet1CIDR": {
                    "default": "Public Subnet 1 CIDR"
                },
                "PublicSubnet2CIDR": {
                    "default": "Public Subnet 2 CIDR"
                },
                "RemoteAccessCIDR": {
                    "default": "Allowed Remote Access CIDR"
                },
                "VPCCIDR": {
                    "default": "VPC CIDR"
                },
                "LicenseKey": {
                    "default": "Informatica License Key"
                }
            }
        }
    },
    "Parameters": {
        "AvailabilityZones": {
            "Description": "List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved and only 2 AZs are used for this deployment",
            "Type": "List<AWS::EC2::AvailabilityZone::Name>",
            "MinLength": "1"
        },
        "RDSDatabaseName": {
            "AllowedPattern": "^([a-zA-Z][a-z0-9A-Z_]{3,20})$",
            "ConstraintDescription": "Only alphanumeric characters and underscore are allowed. Should begin with an alphabet. The value must be 4-20",
            "Description": "Database Name for RDS Instance. Default value is InfaDB",
            "Type": "String",
            "Default": "InfaDB",
            "MinLength": "4",
            "MaxLength": "20"
        },
        "DatabasePassword": {
            "AllowedPattern": "^([a-zA-Z][a-z0-9A-Z_]{3,20})$",
            "ConstraintDescription": "Only alphanumeric characters and underscore are allowed. Should begin with an alphabet. The value must be 8-18",
            "Description": "Password for the Amazon RDS database account. Only alphanumeric characters and underscore are allowed. Should begin with an alphabet. The value must be 8-18",
            "MaxLength": "18",
            "MinLength": "8",
            "NoEcho": "True",
            "Type": "String"
        },
        "DatabasePasswordConfirm": {
            "AllowedPattern": "^([a-zA-Z][a-z0-9A-Z_]{3,20})$",
            "ConstraintDescription": "Only alphanumeric characters and underscore are allowed. Should begin with an alphabet. The value must be 8-18",
            "Description": "Password for the Amazon RDS database account.",
            "MaxLength": "18",
            "MinLength": "8",
            "NoEcho": "True",
            "Type": "String"
        },
        "DatabaseType": {
            "AllowedValues": [
                "Oracle-Standard-Edition-One-12.1.0-License-Included",
                "Oracle-Standard-Edition-One-11.2.0-License-Included",
                "Oracle-Standard-Edition-One-12.1.0-BYOL",
                "Oracle-Standard-Edition-One-11.2.0-BYOL",
                "Oracle-Enterprise-Edition-12.1.0-BYOL",
                "Oracle-Enterprise-Edition-11.2.0-BYOL",
                "Oracle-Standard-Edition-12.1.0-BYOL",
                "Oracle-Standard-Edition-11.2.0-BYOL"
            ],
            "Default": "Oracle-Standard-Edition-One-12.1.0-License-Included",
            "Description": "The type of database to use in Amazon RDS. Currently, you can only use Oracle",
            "Type": "String"
        },
        "DatabaseUsername": {
            "AllowedPattern": "^([a-zA-Z][a-z0-9A-Z_]{3,20})$",
            "ConstraintDescription": "Only alphanumeric characters and underscore are allowed. Should begin with an alphabet. The value must be 4-20",
            "Description": "Username for the Amazon RDS database account",
            "MaxLength": "30",
            "MinLength": "4",
            "Type": "String"
        },
        "EncryptionKeyPhrase": {
            "AllowedPattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=\\S+$).{8,}$",
            "ConstraintDescription": "It should be 8 to 20 characters long, at least one uppercase letter at least one lowercase letter-at least one number Does not contain spaces",
            "Description": "The text string used as the base word from which to generate an encryption key for the Informatica domain",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "InformaticaDomainName": {
            "AllowedPattern": "^([a-zA-Z][a-z0-9A-Z_]{7,20})$",
            "ConstraintDescription": "Only alphanumeric characters and underscore are allowed. Should begin with an alphabet. The value must be 4-20",
            "Description": "Name for the Informatica Domain.",
            "Type": "String",
            "Default": "InfaDomain",
            "MinLength": "8",
            "MaxLength": "20"
        },
        "InformaticaNodeName": {
            "AllowedPattern": "^([a-zA-Z][a-z0-9A-Z_]{3,20})$",
            "ConstraintDescription": "Only alphanumeric characters and underscore are allowed. Should begin with an alphabet. The value must be 4-20",
            "Description": "Prefix for the Nodes in Informatica Domain. Node number will be the suffix for the nodes. Eg InfaNode1, InfaNode2",
            "Type": "String",
            "Default": "Infa",
            "MinLength": "4",
            "MaxLength": "20"
        },
        "InformaticaDomainUsername": {
            "AllowedPattern": "^([a-zA-Z][a-z0-9A-Z_]{7,20})$",
            "ConstraintDescription": "Only alphanumeric characters and underscore are allowed. Should begin with an alphabet. The value must be 4-20",
            "Description": "Username for the Informatica Domain.",
            "Default": "Administrator",
            "MaxLength": "20",
            "MinLength": "8",
            "Type": "String"
        },
        "InformaticaDomainPassword": {
            "AllowedPattern": "^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[^\\s\\w])(?!.*[\"$]).{7,32}$",
            "ConstraintDescription": "Password must be at least 8 characters in length. Should contain at least one special character, number, upper-case and lower-case character. Double quote(\") and dollar($) is not allowed",
            "Description": "Password for the Informatica Domain. Password must be at least 8 characters in length. Should contain at least one special character, number, upper-case and lower-case character. Double quote(\") and dollar($) is not allowed",
            "NoEcho": "True",
            "MaxLength": "32",
            "MinLength": "8",
            "Type": "String"
        },
        "InformaticaDomainPasswordConfirm": {
            "AllowedPattern": "^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[^\\s\\w])(?!.*[\"$]).{7,32}$",
            "ConstraintDescription": "Password must be at least 8 characters in length. Should contain at least one special character, number, upper-case and lower-case character. Double quote(\") and dollar($) is not allowed",
            "Description": "Password for the Informatica Domain.",
            "NoEcho": "True",
            "MaxLength": "32",
            "MinLength": "8",
            "Type": "String"
        },
        "PowerCenterInstanceType": {
            "AllowedValues": [
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge"
            ],
            "Default": "c4.2xlarge",
            "Description": "Instance Type for Informatica Domain. Default is c4.2xlarge",
            "Type": "String"
        },
        "KeyPairName": {
            "Description": "Name of an existing EC2 KeyPair to enable external access to the Informatica Domain",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "MaxLength": "32",
            "MinLength": "1"
        },
        "NumberOfPowerCenterInstances": {
            "Description": "Number of PowerCenter Nodes. Each node runs on one EC2 Instance",
            "Type": "String",
            "AllowedValues": [
                "1",
                "2",
                "4",
                "6",
                "8"
            ],
            "Default": "4"
        },
        "PrivateSubnet1CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.0.0/19",
            "Description": "CIDR block for private subnet 1 located in Availability Zone 1",
            "Type": "String"
        },
        "PrivateSubnet2CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.32.0/19",
            "Description": "CIDR block for private subnet 2 located in Availability Zone 2",
            "Type": "String"
        },
        "PublicSubnet1CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.128.0/20",
            "Description": "CIDR Block for the public subnet 1 located in Availability Zone 1",
            "Type": "String"
        },
        "PublicSubnet2CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.144.0/20",
            "Description": "CIDR Block for the public subnet 2 located in Availability Zone 2",
            "Type": "String"
        },
        "RemoteAccessCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
            "Description": "Allowed CIDR block for external access to the Informatica Domain",
            "Type": "String"
        },
        "VPCCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.0.0/16",
            "Description": "CIDR Block for the VPC",
            "Type": "String"
        },
        "LicenseKey": {
            "Description": "*Optional Argument*. Provide a PUBLIC S3 link for the License Key file. Leave blank to go ahead without the Licence Key",
            "Type": "String",
            "Default": ""
        },
        "EnableEIP": {
            "Description": "Assign Elastic IPs to Instances. Default value is Yes",
            "Type": "String",
            "AllowedValues": [
                "Yes",
                "No"
            ],
            "Default": "Yes"
        }
    },
    "Rules": {
        "InformaticaPasswordConfirm": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Equals": [
                            {
                                "Ref": "InformaticaDomainPassword"
                            },
                            {
                                "Ref": "InformaticaDomainPasswordConfirm"
                            }
                        ]
                    },
                    "AssertDescription": "Informatica Domain Passwords do not match"
                }
            ]
        },
        "DatabasePasswordConfirm": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Equals": [
                            {
                                "Ref": "DatabasePassword"
                            },
                            {
                                "Ref": "DatabasePasswordConfirm"
                            }
                        ]
                    },
                    "AssertDescription": "Database Passwords do not match"
                }
            ]
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "INFORMATICAPCWINHVM": "Informatica-PowerCenter-10.1.0-WindowsServer2012R2-73eb10f0-ef93-494a-bff4-de78cbe56fcb-ami-611e3276.3"
            },
            "ap-northeast-1": {
                "INFORMATICAPCWINHVM": "ami-6b862d0a"
            },
            "ap-northeast-2": {
                "INFORMATICAPCWINHVM": "TBD"
            },
            "ap-south-1": {
                "INFORMATICAPCWINHVM": "TBD"
            },
            "ap-southeast-1": {
                "INFORMATICAPCWINHVM": "ami-c6963aa5"
            },
            "ap-southeast-2": {
                "INFORMATICAPCWINHVM": "ami-c6963aa5"
            },
            "eu-central-1": {
                "INFORMATICAPCWINHVM": "ami-11a4617e"
            },
            "eu-west-1": {
                "INFORMATICAPCWINHVM": "ami-3db3e34e"
            },
            "sa-east-1": {
                "INFORMATICAPCWINHVM": "ami-c872eda4"
            },
            "us-east-1": {
                "INFORMATICAPCWINHVM": "ami-c60410d1"
            },
            "us-east-2": {
                "INFORMATICAPCWINHVM": "TBD"
            },
            "us-west-1": {
                "INFORMATICAPCWINHVM": "ami-329fca52"
            },
            "us-west-2": {
                "INFORMATICAPCWINHVM": "ami-d42d8fb4"
            }
        },
        "Config": {
            "Settings": {
                "DatabaseSize": "db.t2.large",
                "IntegrationServiceName": "PowerCenterIntegrationService",
                "RepositoryServiceName": "PowerCenterRepository",
                "GridName": "InfaDefaultGrid"
            },
            "Oracle-Enterprise-Edition-12.1.0-BYOL": {
                "Engine": "oracle-ee",
                "DB": "Oracle",
                "Version": "12.1",
                "DatabaseSize": "db.m3.large",
                "LicenseModel": "bring-your-own-license",
                "AllocatedStorage": "100",
                "Port": 1521
            },
            "Oracle-Enterprise-Edition-11.2.0-BYOL": {
                "Engine": "oracle-ee",
                "DB": "Oracle",
                "Version": "11.2",
                "DatabaseSize": "db.t2.large",
                "LicenseModel": "bring-your-own-license",
                "AllocatedStorage": "100",
                "Port": 1521
            },
            "Oracle-Standard-Edition-12.1.0-BYOL": {
                "Engine": "oracle-se",
                "DB": "Oracle",
                "Version": "12.1",
                "DatabaseSize": "db.m3.large",
                "LicenseModel": "bring-your-own-license",
                "AllocatedStorage": "100",
                "Port": 1521
            },
            "Oracle-Standard-Edition-11.2.0-BYOL": {
                "Engine": "oracle-ee",
                "DB": "Oracle",
                "Version": "11.2",
                "DatabaseSize": "db.t2.large",
                "LicenseModel": "bring-your-own-license",
                "AllocatedStorage": "100",
                "Port": 1521
            },
            "Oracle-Standard-Edition-One-12.1.0-BYOL": {
                "Engine": "oracle-se1",
                "DB": "Oracle",
                "Version": "12.1",
                "DatabaseSize": "db.m3.large",
                "LicenseModel": "bring-your-own-license",
                "AllocatedStorage": "100",
                "Port": 1521
            },
            "Oracle-Standard-Edition-One-11.2.0-BYOL": {
                "Engine": "oracle-se1",
                "DB": "Oracle",
                "Version": "11.2",
                "DatabaseSize": "db.m3.large",
                "LicenseModel": "bring-your-own-license",
                "AllocatedStorage": "100",
                "Port": 1521
            },
            "Oracle-Standard-Edition-One-12.1.0-License-Included": {
                "Engine": "oracle-se1",
                "DB": "Oracle",
                "Version": "12.1",
                "DatabaseSize": "db.m3.large",
                "LicenseModel": "license-included",
                "AllocatedStorage": "100",
                "Port": 1521
            },
            "Oracle-Standard-Edition-One-11.2.0-License-Included": {
                "Engine": "oracle-se1",
                "DB": "Oracle",
                "Version": "11.2",
                "DatabaseSize": "db.t2.large",
                "LicenseModel": "license-included",
                "AllocatedStorage": "100",
                "Port": 1521
            },
            "Oracle-License-Included": {
                "Engine": "oracle-se1",
                "DB": "Oracle",
                "LicenseModel": "license-included",
                "AllocatedStorage": "50",
                "Port": 1521
            },
            "Oracle-Bring-Your-Own-License": {
                "Engine": "oracle-se1",
                "DB": "Oracle",
                "LicenseModel": "bring-your-own-license",
                "AllocatedStorage": "50",
                "Port": 1521
            }
        }
    },
    "Conditions": {
        "EnableEIPCondition": {
            "Fn::Equals": [
                {
                    "Ref": "EnableEIP"
                },
                "Yes"
            ]
        },
        "AddLicenseCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "LicenseKey"
                        },
                        ""
                    ]
                }
            ]
        },
        "2NodeCondition": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NumberOfPowerCenterInstances"
                        },
                        "2"
                    ]
                },
                {
                    "Condition": "4NodeCondition"
                },
                {
                    "Condition": "6NodeCondition"
                },
                {
                    "Condition": "8NodeCondition"
                }
            ]
        },
        "4NodeCondition": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NumberOfPowerCenterInstances"
                        },
                        "4"
                    ]
                },
                {
                    "Condition": "6NodeCondition"
                },
                {
                    "Condition": "8NodeCondition"
                }
            ]
        },
        "6NodeCondition": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NumberOfPowerCenterInstances"
                        },
                        "6"
                    ]
                },
                {
                    "Condition": "8NodeCondition"
                }
            ]
        },
        "8NodeCondition": {
            "Fn::Equals": [
                {
                    "Ref": "NumberOfPowerCenterInstances"
                },
                "8"
            ]
        },
        "2NodeEIPCondition": {
            "Fn::And": [
                {
                    "Condition": "EnableEIPCondition"
                },
                {
                    "Condition": "2NodeCondition"
                }
            ]
        },
        "4NodeEIPCondition": {
            "Fn::And": [
                {
                    "Condition": "EnableEIPCondition"
                },
                {
                    "Condition": "4NodeCondition"
                }
            ]
        },
        "6NodeEIPCondition": {
            "Fn::And": [
                {
                    "Condition": "EnableEIPCondition"
                },
                {
                    "Condition": "6NodeCondition"
                }
            ]
        },
        "8NodeEIPCondition": {
            "Fn::And": [
                {
                    "Condition": "EnableEIPCondition"
                },
                {
                    "Condition": "8NodeCondition"
                }
            ]
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "VPCCIDR"
                },
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PowerCenter-VPC"
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PowerCenter-IGW"
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "DataTierSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PrivateSubnet1CIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PowerCenter DataTier1 Private subnet 1"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },
        "DataTierSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PrivateSubnet2CIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PowerCenter DataTier2 Private subnet 2"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PublicSubnet1CIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PowerCenter Public subnet 1"
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "MapPublicIpOnLaunch": true
            }
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PublicSubnet2CIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PowerCenter Public subnet 2"
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "MapPublicIpOnLaunch": true
            }
        },
        "PublicSubnetRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Public Subnets"
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "PublicSubnetRoute": {
            "DependsOn": "VPCGatewayAttachment",
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicSubnetRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PublicSubnetRouteTable"
                }
            }
        },
        "PublicSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PublicSubnetRouteTable"
                }
            }
        },
        "DBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "Subnet Group for Informatica PowerCenter RDS Database",
                "SubnetIds": [
                    {
                        "Ref": "DataTierSubnet1"
                    },
                    {
                        "Ref": "DataTierSubnet2"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "RDSDbSubnetGroup"
                    }
                ]
            }
        },
        "DBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Informatica PowerCenter RDS Database Security Group",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": {
                            "Fn::FindInMap": [
                                "Config",
                                {
                                    "Ref": "DatabaseType"
                                },
                                "Port"
                            ]
                        },
                        "ToPort": {
                            "Fn::FindInMap": [
                                "Config",
                                {
                                    "Ref": "DatabaseType"
                                },
                                "Port"
                            ]
                        },
                        "SourceSecurityGroupId": {
                            "Ref": "InstanceSecurityGroup"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "RDSInstance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "AllocatedStorage": {
                    "Fn::FindInMap": [
                        "Config",
                        {
                            "Ref": "DatabaseType"
                        },
                        "AllocatedStorage"
                    ]
                },
                "DBInstanceClass": {
                    "Fn::FindInMap": [
                        "Config",
                        "Settings",
                        "DatabaseSize"
                    ]
                },
                "DBName": {
                   "Ref": "RDSDatabaseName"
                },
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                },
                "Engine": {
                    "Fn::FindInMap": [
                        "Config",
                        {
                            "Ref": "DatabaseType"
                        },
                        "Engine"
                    ]
                },
                "LicenseModel": {
                    "Fn::FindInMap": [
                        "Config",
                        {
                            "Ref": "DatabaseType"
                        },
                        "LicenseModel"
                    ]
                },
                "MasterUsername": {
                    "Ref": "DatabaseUsername"
                },
                "MasterUserPassword": {
                    "Ref": "DatabasePassword"
                },
                "MultiAZ": true,
                "Port": {
                    "Fn::FindInMap": [
                        "Config",
                        {
                            "Ref": "DatabaseType"
                        },
                        "Port"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Infa-PowerCenter-RDS-Instance"
                    }
                ],
                "VPCSecurityGroups": [
                    {
                        "Ref": "DBSecurityGroup"
                    }
                ]
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable RDP and within VPC traffic",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5000",
                        "ToPort": "7000",
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }
                    }
                ]
            }
        },
        "InstanceSecurityGroupIngress": {
            "DependsOn": "InstanceSecurityGroup",
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "InstanceSecurityGroup",
                        "GroupId"
                    ]
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "InstanceSecurityGroup",
                        "GroupId"
                    ]
                }
            }
        },
        "InfaMasterEIPAddress": {
            "Type": "AWS::EC2::EIP",
            "Condition": "EnableEIPCondition",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "InfaMaster"
                }
            }
        },
        "InfaMaster": {
            "DependsOn": "RDSInstance",
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "setupdomain": [
                            "config1"
                        ],
                        "setupwithlicense": [
                            "config2",
                            "config1"
                        ]
                    },
                    "config1": {
                        "commands": {
                            "1-setup": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell -F C:\\InfaEc2Scripts\\winInfaInstallerEc2.ps1 ",
                                            {
                                                "Ref": "InformaticaDomainPassword"
                                            },
                                            " ",
                                            {
                                                "Ref": "DatabasePassword"
                                            },
                                            " ",
                                            {
                                                "Ref": "DatabasePassword"
                                            },
                                            " ",
                                            {
                                                "Ref": "EncryptionKeyPhrase"
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "config2": {
                        "files": {
                            "c:\\Informatica\\10.1.1\\License.key": {
                                "source": {
                                    "Ref": "LicenseKey"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "InformaticaNodeName"
                                    },
                                    "Node1"
                                ]
                            ]
                        }
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "INFORMATICAPCWINHVM"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Ref": "PowerCenterInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<powershell>\n",
                                "echo \"Initializing variables\" \n",
                                "$env:CREATE_DOMAIN=1 \n",
                                "$env:JOIN_DOMAIN=0 \n",
                                "$env:SERVES_AS_GATEWAY=0 \n",
                                "$env:DOMAIN_USER_NAME=\"",
                                {
                                    "Ref": "InformaticaDomainUsername"
                                },
                                "\"\n",
                                "$env:AWS_REGION=\"",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\"\n",
                                "$env:ADD_LICENSE_CONDITION=\"",
                                {
                                    "Fn::If": [
                                        "AddLicenseCondition",
                                        "1",
                                        "0"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_TYPE=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        {
                                            "Ref": "DatabaseType"
                                        },
                                        "DB"
                                    ]
                                },
                                "\"\n",
                                "$env:REPOSITORY_SERVICE_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "RepositoryServiceName"
                                    ]
                                },
                                "\"\n",
                                "$env:INTEGRATION_SERVICE_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "IntegrationServiceName"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_ADDRESS=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Address"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_PORT=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Port"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_UNAME=\"",
                                {
                                    "Ref": "DatabaseUsername"
                                },
                                "\"\n",
                                "$env:DB_SERVICENAME=\"",
                                {
                                    "Ref": "RDSDatabaseName"
                                },
                                "\"\n",
                                "$env:DOMAIN_NAME=\"",
                                {
                                    "Ref": "InformaticaDomainName"
                                },
                                "\"\n",
                                "$env:NODE_NAME=\"",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InformaticaNodeName"
                                            },
                                            "Node1"
                                        ]
                                    ]
                                },
                                "\"\n",
                                "$env:GRID_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "GridName"
                                    ]
                                },
                                "\"\n",
                                "$env:REPO_USER=\"",
                                {
                                    "Ref": "DatabaseUsername"
                                },
                                "\"\n",
                                "$env:INFORMATICA_SERVICES=\"2",
                                "\"\n",
                                "$env:JOIN_NODE_NAME=\"Informatica_NotApplicable_NodeName\" \n",
                                "$env:DOMAIN_HOST_NAME=\"$env:COMPUTERNAME\" \n",
                                "echo \"running cfn init\" \n",
                                "cfn-init.exe -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --configsets ",
                                {
                                    "Fn::If": [
                                        "AddLicenseCondition",
                                        "setupwithlicense",
                                        "setupdomain"
                                    ]
                                },
                                " --resource InfaMaster ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "echo \"running cfn signal\" \n",
                                "cfn-signal -e $LASTEXITCODE ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --resource InfaMaster ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</powershell>"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT3H"
                }
            }
        },
        "InfaNode2EIPAddress": {
            "Condition": "2NodeEIPCondition",
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "InfaNode2"
                }
            }
        },
        "InfaNode2": {
            "Condition": "2NodeCondition",
            "DependsOn": "InfaMaster",
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "1-setup": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell -F C:\\InfaEc2Scripts\\winInfaInstallerEc2.ps1 ",
                                            {
                                                "Ref": "InformaticaDomainPassword"
                                            },
                                            " ",
                                            {
                                                "Ref": "DatabasePassword"
                                            },
                                            " null ",
                                            {
                                                "Ref": "EncryptionKeyPhrase"
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "InformaticaNodeName"
                                    },
                                    "Node2"
                                ]
                            ]
                        }
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "INFORMATICAPCWINHVM"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Ref": "PowerCenterInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<powershell>\n",
                                "echo \"Initializing variables\" \n",
                                "$env:CREATE_DOMAIN=0 \n",
                                "$env:JOIN_DOMAIN=1 \n",
                                "$env:SERVES_AS_GATEWAY=1",
                                "\n",
                                "$env:DOMAIN_USER_NAME=\"",
                                {
                                    "Ref": "InformaticaDomainUsername"
                                },
                                "\"\n",
                                "$env:AWS_REGION=\"",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\"\n",
                                "$env:DB_TYPE=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        {
                                            "Ref": "DatabaseType"
                                        },
                                        "DB"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_ADDRESS=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Address"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_PORT=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Port"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_UNAME=\"",
                                {
                                    "Ref": "DatabaseUsername"
                                },
                                "\"\n",
                                "$env:DB_SERVICENAME=\"",
                                {
                                    "Ref": "RDSDatabaseName"
                                },
                                "\"\n",
                                "$env:DOMAIN_NAME=\"",
                                {
                                    "Ref": "InformaticaDomainName"
                                },
                                "\"\n",
                                "$env:NODE_NAME=\"",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InformaticaNodeName"
                                            },
                                            "Node1"
                                        ]
                                    ]
                                },
                                "\"\n",
                                "$env:GRID_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "GridName"
                                    ]
                                },
                                "\"\n",
                                "$env:JOIN_NODE_NAME=\"",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InformaticaNodeName"
                                            },
                                            "Node2"
                                        ]
                                    ]
                                },
                                "\"\n",
                                "$env:INTEGRATION_SERVICE_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "IntegrationServiceName"
                                    ]
                                },
                                "\"\n",
                                "$env:DOMAIN_HOST_NAME=\"",
                                {
                                    "Fn::GetAtt": [
                                        "InfaMaster",
                                        "PrivateIp"
                                    ]
                                },
                                "\"\n",
                                "echo \"running cfn init\" \n",
                                "cfn-init --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --resource InfaNode2 ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "echo \"running cfn signal\" \n",
                                "cfn-signal -e $LASTEXITCODE ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --resource InfaNode2 ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</powershell>"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT2H30M"
                }
            }
        },
        "InfaNode3EIPAddress": {
            "Condition": "4NodeEIPCondition",
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "InfaNode3"
                }
            }
        },
        "InfaNode3": {
            "Condition": "4NodeCondition",
            "DependsOn": "InfaMaster",
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "1-setup": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell -F C:\\InfaEc2Scripts\\winInfaInstallerEc2.ps1 ",
                                            {
                                                "Ref": "InformaticaDomainPassword"
                                            },
                                            " ",
                                            {
                                                "Ref": "DatabasePassword"
                                            },
                                            " null ",
                                            {
                                                "Ref": "EncryptionKeyPhrase"
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "InformaticaNodeName"
                                    },
                                    "Node3"
                                ]
                            ]
                        }
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "INFORMATICAPCWINHVM"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Ref": "PowerCenterInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<powershell>\n",
                                "echo \"Initializing variables\" \n",
                                "$env:CREATE_DOMAIN=0 \n",
                                "$env:JOIN_DOMAIN=1 \n",
                                "$env:SERVES_AS_GATEWAY=1",
                                "\n",
                                "$env:DOMAIN_USER_NAME=\"",
                                {
                                    "Ref": "InformaticaDomainUsername"
                                },
                                "\"\n",
                                "$env:AWS_REGION=\"",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\"\n",
                                "$env:DB_TYPE=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        {
                                            "Ref": "DatabaseType"
                                        },
                                        "DB"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_ADDRESS=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Address"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_PORT=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Port"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_UNAME=\"",
                                {
                                    "Ref": "DatabaseUsername"
                                },
                                "\"\n",
                                "$env:DB_SERVICENAME=\"",
                                {
                                   "Ref": "RDSDatabaseName"
                                },
                                "\"\n",
                                "$env:DOMAIN_NAME=\"",
                                {
                                    "Ref": "InformaticaDomainName"
                                },
                                "\"\n",
                                "$env:NODE_NAME=\"",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InformaticaNodeName"
                                            },
                                            "Node1"
                                        ]
                                    ]
                                },
                                "\"\n",
                                "$env:GRID_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "GridName"
                                    ]
                                },
                                "\"\n",
                                "$env:JOIN_NODE_NAME=\"",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InformaticaNodeName"
                                            },
                                            "Node3"
                                        ]
                                    ]
                                },
                                "\"\n",
                                "$env:INTEGRATION_SERVICE_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "IntegrationServiceName"
                                    ]
                                },
                                "\"\n",
                                "$env:DOMAIN_HOST_NAME=\"",
                                {
                                    "Fn::GetAtt": [
                                        "InfaMaster",
                                        "PrivateIp"
                                    ]
                                },
                                "\"\n",
                                "echo \"running cfn init\" \n",
                                "cfn-init --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --resource InfaNode3 ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "echo \"running cfn signal\" \n",
                                "cfn-signal -e $LASTEXITCODE ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --resource InfaNode3 ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</powershell>"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT2H30M"
                }
            }
        },
        "InfaNode4EIPAddress": {
            "Condition": "4NodeEIPCondition",
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "InfaNode4"
                }
            }
        },
        "InfaNode4": {
            "Condition": "4NodeCondition",
            "DependsOn": "InfaMaster",
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "1-setup": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell -F C:\\InfaEc2Scripts\\winInfaInstallerEc2.ps1 ",
                                            {
                                                "Ref": "InformaticaDomainPassword"
                                            },
                                            " ",
                                            {
                                                "Ref": "DatabasePassword"
                                            },
                                            " null ",
                                            {
                                                "Ref": "EncryptionKeyPhrase"
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "InformaticaNodeName"
                                    },
                                    "Node4"
                                ]
                            ]
                        }
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "INFORMATICAPCWINHVM"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Ref": "PowerCenterInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<powershell>\n",
                                "echo \"Initializing variables\" \n",
                                "$env:CREATE_DOMAIN=0 \n",
                                "$env:JOIN_DOMAIN=1 \n",
                                "$env:SERVES_AS_GATEWAY=1",
                                "\n",
                                "$env:DOMAIN_USER_NAME=\"",
                                {
                                    "Ref": "InformaticaDomainUsername"
                                },
                                "\"\n",
                                "$env:AWS_REGION=\"",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\"\n",
                                "$env:DB_TYPE=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        {
                                            "Ref": "DatabaseType"
                                        },
                                        "DB"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_ADDRESS=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Address"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_PORT=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Port"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_UNAME=\"",
                                {
                                    "Ref": "DatabaseUsername"
                                },
                                "\"\n",
                                "$env:DB_SERVICENAME=\"",
                                {
                                   "Ref": "RDSDatabaseName"
                                },
                                "\"\n",
                                "$env:DOMAIN_NAME=\"",
                                {
                                    "Ref": "InformaticaDomainName"
                                },
                                "\"\n",
                                "$env:NODE_NAME=\"",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InformaticaNodeName"
                                            },
                                            "Node1"
                                        ]
                                    ]
                                },
                                "\"\n",
                                "$env:GRID_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "GridName"
                                    ]
                                },
                                "\"\n",
                                "$env:JOIN_NODE_NAME=\"",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InformaticaNodeName"
                                            },
                                            "Node4"
                                        ]
                                    ]
                                },
                                "\"\n",
                                "$env:INTEGRATION_SERVICE_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "IntegrationServiceName"
                                    ]
                                },
                                "\"\n",
                                "$env:DOMAIN_HOST_NAME=\"",
                                {
                                    "Fn::GetAtt": [
                                        "InfaMaster",
                                        "PrivateIp"
                                    ]
                                },
                                "\"\n",
                                "echo \"running cfn init\" \n",
                                "cfn-init --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --resource InfaNode4 ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "echo \"running cfn signal\" \n",
                                "cfn-signal -e $LASTEXITCODE ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --resource InfaNode4 ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</powershell>"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT2H30M"
                }
            }
        },
        "InfaNode5EIPAddress": {
            "Condition": "6NodeEIPCondition",
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "InfaNode5"
                }
            }
        },
        "InfaNode5": {
            "Condition": "6NodeCondition",
            "DependsOn": "InfaMaster",
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "1-setup": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell -F C:\\InfaEc2Scripts\\winInfaInstallerEc2.ps1 ",
                                            {
                                                "Ref": "InformaticaDomainPassword"
                                            },
                                            " ",
                                            {
                                                "Ref": "DatabasePassword"
                                            },
                                            " null ",
                                            {
                                                "Ref": "EncryptionKeyPhrase"
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "InformaticaNodeName"
                                    },
                                    "Node5"
                                ]
                            ]
                        }
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "INFORMATICAPCWINHVM"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Ref": "PowerCenterInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<powershell>\n",
                                "echo \"Initializing variables\" \n",
                                "$env:CREATE_DOMAIN=0 \n",
                                "$env:JOIN_DOMAIN=1 \n",
                                "$env:SERVES_AS_GATEWAY=1",
                                "\n",
                                "$env:DOMAIN_USER_NAME=\"",
                                {
                                    "Ref": "InformaticaDomainUsername"
                                },
                                "\"\n",
                                "$env:AWS_REGION=\"",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\"\n",
                                "$env:DB_TYPE=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        {
                                            "Ref": "DatabaseType"
                                        },
                                        "DB"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_ADDRESS=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Address"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_PORT=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Port"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_UNAME=\"",
                                {
                                    "Ref": "DatabaseUsername"
                                },
                                "\"\n",
                                "$env:DB_SERVICENAME=\"",
                                {
                                  "Ref": "RDSDatabaseName"
                                },
                                "\"\n",
                                "$env:DOMAIN_NAME=\"",
                                {
                                    "Ref": "InformaticaDomainName"
                                },
                                "\"\n",
                                "$env:NODE_NAME=\"",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InformaticaNodeName"
                                            },
                                            "Node1"
                                        ]
                                    ]
                                },
                                "\"\n",
                                "$env:GRID_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "GridName"
                                    ]
                                },
                                "\"\n",
                                "$env:JOIN_NODE_NAME=\"",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InformaticaNodeName"
                                            },
                                            "Node5"
                                        ]
                                    ]
                                },
                                "\"\n",
                                "$env:INTEGRATION_SERVICE_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "IntegrationServiceName"
                                    ]
                                },
                                "\"\n",
                                "$env:DOMAIN_HOST_NAME=\"",
                                {
                                    "Fn::GetAtt": [
                                        "InfaMaster",
                                        "PrivateIp"
                                    ]
                                },
                                "\"\n",
                                "echo \"running cfn init\" \n",
                                "cfn-init --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --resource InfaNode5 ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "echo \"running cfn signal\" \n",
                                "cfn-signal -e $LASTEXITCODE ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --resource InfaNode5 ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</powershell>"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT2H30M"
                }
            }
        },
        "InfaNode6EIPAddress": {
            "Condition": "6NodeEIPCondition",
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "InfaNode6"
                }
            }
        },
        "InfaNode6": {
            "Condition": "6NodeCondition",
            "DependsOn": "InfaMaster",
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "1-setup": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell -F C:\\InfaEc2Scripts\\winInfaInstallerEc2.ps1 ",
                                            {
                                                "Ref": "InformaticaDomainPassword"
                                            },
                                            " ",
                                            {
                                                "Ref": "DatabasePassword"
                                            },
                                            " null ",
                                            {
                                                "Ref": "EncryptionKeyPhrase"
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "InformaticaNodeName"
                                    },
                                    "Node6"
                                ]
                            ]
                        }
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "INFORMATICAPCWINHVM"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Ref": "PowerCenterInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<powershell>\n",
                                "echo \"Initializing variables\" \n",
                                "$env:CREATE_DOMAIN=0 \n",
                                "$env:JOIN_DOMAIN=1 \n",
                                "$env:SERVES_AS_GATEWAY=1",
                                "\n",
                                "$env:DOMAIN_USER_NAME=\"",
                                {
                                    "Ref": "InformaticaDomainUsername"
                                },
                                "\"\n",
                                "$env:AWS_REGION=\"",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\"\n",
                                "$env:DB_TYPE=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        {
                                            "Ref": "DatabaseType"
                                        },
                                        "DB"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_ADDRESS=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Address"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_PORT=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Port"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_UNAME=\"",
                                {
                                    "Ref": "DatabaseUsername"
                                },
                                "\"\n",
                                "$env:DB_SERVICENAME=\"",
                                {
                                    "Ref": "RDSDatabaseName"
                                },
                                "\"\n",
                                "$env:DOMAIN_NAME=\"",
                                {
                                    "Ref": "InformaticaDomainName"
                                },
                                "\"\n",
                                "$env:NODE_NAME=\"",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InformaticaNodeName"
                                            },
                                            "Node1"
                                        ]
                                    ]
                                },
                                "\"\n",
                                "$env:GRID_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "GridName"
                                    ]
                                },
                                "\"\n",
                                "$env:JOIN_NODE_NAME=\"",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InformaticaNodeName"
                                            },
                                            "Node6"
                                        ]
                                    ]
                                },
                                "\"\n",
                                "$env:INTEGRATION_SERVICE_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "IntegrationServiceName"
                                    ]
                                },
                                "\"\n",
                                "$env:DOMAIN_HOST_NAME=\"",
                                {
                                    "Fn::GetAtt": [
                                        "InfaMaster",
                                        "PrivateIp"
                                    ]
                                },
                                "\"\n",
                                "echo \"running cfn init\" \n",
                                "cfn-init --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --resource InfaNode6 ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "echo \"running cfn signal\" \n",
                                "cfn-signal -e $LASTEXITCODE ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --resource InfaNode6 ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</powershell>"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT2H30M"
                }
            }
        },
        "InfaNode7EIPAddress": {
            "Condition": "8NodeEIPCondition",
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "InfaNode7"
                }
            }
        },
        "InfaNode7": {
            "Condition": "8NodeCondition",
            "DependsOn": "InfaMaster",
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "1-setup": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell -F C:\\InfaEc2Scripts\\winInfaInstallerEc2.ps1 ",
                                            {
                                                "Ref": "InformaticaDomainPassword"
                                            },
                                            " ",
                                            {
                                                "Ref": "DatabasePassword"
                                            },
                                            " null ",
                                            {
                                                "Ref": "EncryptionKeyPhrase"
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "InformaticaNodeName"
                                    },
                                    "Node7"
                                ]
                            ]
                        }
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "INFORMATICAPCWINHVM"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Ref": "PowerCenterInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<powershell>\n",
                                "echo \"Initializing variables\" \n",
                                "$env:CREATE_DOMAIN=0 \n",
                                "$env:JOIN_DOMAIN=1 \n",
                                "$env:SERVES_AS_GATEWAY=1",
                                "\n",
                                "$env:DOMAIN_USER_NAME=\"",
                                {
                                    "Ref": "InformaticaDomainUsername"
                                },
                                "\"\n",
                                "$env:AWS_REGION=\"",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\"\n",
                                "$env:DB_TYPE=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        {
                                            "Ref": "DatabaseType"
                                        },
                                        "DB"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_ADDRESS=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Address"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_PORT=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Port"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_UNAME=\"",
                                {
                                    "Ref": "DatabaseUsername"
                                },
                                "\"\n",
                                "$env:DB_SERVICENAME=\"",
                                {
                                   "Ref": "RDSDatabaseName"
                                },
                                "\"\n",
                                "$env:DOMAIN_NAME=\"",
                                {
                                    "Ref": "InformaticaDomainName"
                                },
                                "\"\n",
                                "$env:NODE_NAME=\"",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InformaticaNodeName"
                                            },
                                            "Node1"
                                        ]
                                    ]
                                },
                                "\"\n",
                                "$env:GRID_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "GridName"
                                    ]
                                },
                                "\"\n",
                                "$env:JOIN_NODE_NAME=\"",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InformaticaNodeName"
                                            },
                                            "Node7"
                                        ]
                                    ]
                                },
                                "\"\n",
                                "$env:INTEGRATION_SERVICE_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "IntegrationServiceName"
                                    ]
                                },
                                "\"\n",
                                "$env:DOMAIN_HOST_NAME=\"",
                                {
                                    "Fn::GetAtt": [
                                        "InfaMaster",
                                        "PrivateIp"
                                    ]
                                },
                                "\"\n",
                                "echo \"running cfn init\" \n",
                                "cfn-init --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --resource InfaNode7 ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "echo \"running cfn signal\" \n",
                                "cfn-signal -e $LASTEXITCODE ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --resource InfaNode7 ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</powershell>"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT2H30M"
                }
            }
        },
        "InfaNode8EIPAddress": {
            "Condition": "8NodeEIPCondition",
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "InfaNode8"
                }
            }
        },
        "InfaNode8": {
            "Condition": "8NodeCondition",
            "DependsOn": "InfaMaster",
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "1-setup": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell -F C:\\InfaEc2Scripts\\winInfaInstallerEc2.ps1 ",
                                            {
                                                "Ref": "InformaticaDomainPassword"
                                            },
                                            " ",
                                            {
                                                "Ref": "DatabasePassword"
                                            },
                                            " null ",
                                            {
                                                "Ref": "EncryptionKeyPhrase"
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "InformaticaNodeName"
                                    },
                                    "Node8"
                                ]
                            ]
                        }
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "INFORMATICAPCWINHVM"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Ref": "PowerCenterInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<powershell>\n",
                                "echo \"Initializing variables\" \n",
                                "$env:CREATE_DOMAIN=0 \n",
                                "$env:JOIN_DOMAIN=1 \n",
                                "$env:SERVES_AS_GATEWAY=1",
                                "\n",
                                "$env:DOMAIN_USER_NAME=\"",
                                {
                                    "Ref": "InformaticaDomainUsername"
                                },
                                "\"\n",
                                "$env:AWS_REGION=\"",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\"\n",
                                "$env:DB_TYPE=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        {
                                            "Ref": "DatabaseType"
                                        },
                                        "DB"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_ADDRESS=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Address"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_PORT=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Port"
                                    ]
                                },
                                "\"\n",
                                "$env:DB_UNAME=\"",
                                {
                                    "Ref": "DatabaseUsername"
                                },
                                "\"\n",
                                "$env:DB_SERVICENAME=\"",
                                {
                                    "Ref": "RDSDatabaseName"
                                },
                                "\"\n",
                                "$env:DOMAIN_NAME=\"",
                                {
                                    "Ref": "InformaticaDomainName"
                                },
                                "\"\n",
                                "$env:NODE_NAME=\"",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InformaticaNodeName"
                                            },
                                            "Node1"
                                        ]
                                    ]
                                },
                                "\"\n",
                                "$env:GRID_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "GridName"
                                    ]
                                },
                                "\"\n",
                                "$env:JOIN_NODE_NAME=\"",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InformaticaNodeName"
                                            },
                                            "Node8"
                                        ]
                                    ]
                                },
                                "\"\n",
                                "$env:INTEGRATION_SERVICE_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "IntegrationServiceName"
                                    ]
                                },
                                "\"\n",
                                "$env:DOMAIN_HOST_NAME=\"",
                                {
                                    "Fn::GetAtt": [
                                        "InfaMaster",
                                        "PrivateIp"
                                    ]
                                },
                                "\"\n",
                                "echo \"running cfn init\" \n",
                                "cfn-init --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --resource InfaNode8 ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "echo \"running cfn signal\" \n",
                                "cfn-signal -e $LASTEXITCODE ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " --resource InfaNode8 ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "<powershell>"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT2H30M"
                }
            }
        }
    },
    "Outputs": {
        "PowerCenterAgentIP": {
            "Value": {
                "Fn::GetAtt": [
                    "InfaMaster",
                    "PublicIp"
                ]
            },
            "Description": "Elastic IP address of the PowerCenter instance"
        },
        "InstanceID": {
            "Description": "Instance ID of the newly created EC2 Master instance",
            "Value": {
                "Ref": "InfaMaster"
            }
        },
        "AvailabilityZone": {
            "Description": "Availability Zone of the newly created EC2 instances",
            "Value": {
                "Fn::GetAtt": [
                    "InfaMaster",
                    "AvailabilityZone"
                ]
            }
        },
        "PublicDNS": {
            "Description": "Public DNS name of the newly created EC2 Master instance",
            "Value": {
                "Fn::GetAtt": [
                    "InfaMaster",
                    "PublicDnsName"
                ]
            }
        },
        "RDSInstance": {
            "Value": {
                "Ref": "RDSInstance"
            },
            "Description": "RDS Instance ID"
        },
        "RDSEndpointAddress": {
            "Description": "RDS Address",
            "Value": {
                "Fn::GetAtt": [
                    "RDSInstance",
                    "Endpoint.Address"
                ]
            }
        },
        "RDSEndpointPort": {
            "Description": "RDS Port",
            "Value": {
                "Fn::GetAtt": [
                    "RDSInstance",
                    "Endpoint.Port"
                ]
            }
        }
    }
}